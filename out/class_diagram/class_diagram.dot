@startuml

class Map
{
- int length;
- int width;
- {static} EmptySlot empty;
- IPrintable table;
+ Map(int, int);
+ String toString();
+ void displayMap();
+ IPrintable getField(int, int);
+ IPrintable getField(int[]);
+ IPrintable setField(IPrintable, int, int);
+ IPrintable setField(IPrintable, int[]);
}

interface IPrintable
{
+ String toString();
+ String getId();
+ char getRepresentation();
}

abstract class Being
{
- String id;
# Character representation;
+ Being (String, char);
}

abstract class Record
{
- IMovable being;
- int vertical;
- int horizontal;
+ Record(IMovable, int, int);
+ IMovable getBeing();
}

interface IMapable
{
+ void move();
+ int[] getVerHor();
+ void setVerHor(int[]);
}

class BeingContainer
{
- List<IMapable> list;
- Map map;
+ BeingContainer(Map map);
+ List<IMapable> getList();
+ Map getMap();
+ void performMovementRound();
}

class EmptySlot
{
+ EmptySlot();
}

interface IDiseaseSensitive
{
+ void PerformIllness();
}

interface IMovable
{
+ int[] move(int[]);
}

class Human
{
- int healthPoints;
- boolean isInfected;
- boolean isAlive;
- int sex;
-  int age;
- {static} int humanCounter;
+ String getSex();
+ int getHealthPoints();
+ boolean getIsInfected();
+ boolean getIsAlive();
+ int getAge();
}

class Dice
{
+ {static} int d2();
+ {static} int d2(int);
+ {static} int d4();
+ {static} int d4(int);
+ {static} int d6();
+ {static} int d6(int);
+ {static} int d8();
+ {static} int d8(int);
+ {static} int d10();
+ {static} int d10(int);
+ {static} int d12();
+ {static} int d12(int);
+ {static} int d20();
+ {static} int d20(int);
+ {static} int d100();
+ {static} int d100(int);
}

class Doctor
{
+ Doctor();
+ void heal(Human);
}

Map o- IPrintable
IPrintable <|-- Being
Being <|-- EmptySlot
IMapable <|-- Record
BeingContainer o- IMapable
Being <|-- Human
IMovable <|-- Human
IDiseaseSensitive <|-- Human
IMovable -o Record
Map *- EmptySlot
Map -o BeingContainer
Human <|-- Doctor
@enduml