@startuml

class Map
{
- int length;
- int width;
- {static} EmptySlot empty;
- IPrintable table;
+ Map(int, int);
+ String toString();
+ void displayMap();
+ IPrintable getField(int, int);
+ IPrintable getField(int[]);
+ IPrintable setField(IPrintable, int, int);
+ IPrintable setField(IPrintable, int[]);
}

interface IPrintable
{
+ String toString();
+ String getId();
+ char getRepresentation();
}

abstract class Being
{
- String id;
# Character representation;
+ Being (String, char);
}

abstract class Record
{
- IMovable being;
- int vertical;
- int horizontal;
+ Record(IMovable, int, int);
+ IMovable getBeing();
}

interface IMapable
{
+ void move();
+ int[] getVerHor();
+ void setVerHor(int[]);
}

class BeingContainer
{
- List<IMapable> list;
- Map map;
+ BeingContainer(Map map);
+ List<IMapable> getList();
+ Map getMap();
+ void performMovementRound();
}

class EmptySlot
{
+ EmptySlot();
}

interface IDiseaseSensitive
{
+ void PerformIllness();
}

interface IMovable
{
+ int[] move(int[]);
}

class Human
{
- int healthPoints;
- boolean isInfected;
- boolean isAlive;
- int sex;
-  int age;
- {static} int humanCounter;
+ String getSex();
+ int getSexValue();
+ int getHealyhPoints();
+ boolean getIsInfected();
+ int getAge();
}

class Dice
{
+ {static} int d2();
+ {static} int d2(int);
+ {static} int d4();
+ {static} int d4(int);
+ {static} int d6();
+ {static} int d6(int);
+ {static} int d8();
+ {static} int d8(int);
+ {static} int d10();
+ {static} int d10(int);
+ {static} int d12();
+ {static} int d12(int);
+ {static} int d20();
+ {static} int d20(int);
+ {static} int d100();
+ {static} int d100(int);
}

class Doctor
{
+ Doctor();
+ void heal(Human);
}

abstract class Vehicle
{
- int capacity;
- int velocity
- {static} int numVeh;
- List<IMovable> passengers;
- int numPassengers;
+ String toString();
+ Coordinates move();
+ void setPassengers();
+ int getVelocity();
+ int getCapacity();
+ getNumVeh();
+ List<IMovable> getPassengers();
}

abstract class Building
{
    - {static} int blockCounter;
    - int capacity;
    + void setCapacity(int);
    + int getCapacity();
    + int getBlockCounter();
}

class Ambulance
{
    - {static} int numAmb;
    + String toString();
    + int getNumAmb();
}

class Hearse 
{
    - {static} int numHear;
    + String toString();
    + int getNumHear();
}

class Hospital
{
    - {static} int hospitalCounter;
    + int getHospitalCounter();

}

class Graveyard
{

}

class Dispatching
{

}

abstract class Disease 
{
    - boolean isActive;
    - int timeTilSymptoms;
    - int timeTilInfect;
    - int timeTilCured;
    - String id;
    - int infectionRate;
    - int activeRate;
    # Infector infector;
    + {abstract} progress(Human, DiseaseRecord);
    + {abstract} infect(Human);
    + boolean getIsActive();
    + String getId();
    + int getTimeTilInfect();
    + int getTimeTilCured();
    + int getInfectionRate();
    + int getTimeTilSymptoms();
    + int getActiveRate();
}

class DiseaseRecord 
{
    - Disease disease;
    - boolean isActive;
    - boolean infects;
    - boolean areSymptoms;
    - boolean isCured;
    - int state;
    + void infect(Human);
    + void setIsActive(boolean);
    + void setInfects(boolean);
    + void setIsCured(boolean);
    + void setState(int);
    + void setAreSymptom(boolean);
    + String getDiseaseId();
    + boolean getIsActive();
    + boolean getInfects();
    + boolean getIsCured();
    + int getState();
    + boolean getAreSymptoms(); 
}

interface IDisease 
{
    + void infect(Human);
    + void progress(Human, DiseaseRecord);
    + boolean getIsActive();
    + int getInfectionRate();
    + int getActiveRate();
    + int getTimeTilSymptoms();
}

class Infector 
{
    + void performInfection(Human, Disease);
}

class Virus
{
    - int power1;
    - int power2;
    + void progress(Human, DiseaseRecord);
    +void infect(Human);
}

class Queue 
{

}

class Coordinates 
{
    - int vertical;
    - int horizontal;
    + String toString();
    + void addVector(Coordinates);
    + Coordinates changedVector(int, int);
    + Coordinates neighboursClockwise(int);
    + void setCoordinates(int, int);
    + void setCoordinates(Coordinates);
    + void setVertical(int);
    + void setHorizontal(int);
    + int getVertical();
    + int getHorizontal();
}

Map o- IPrintable
IPrintable <|-- Being
Being <|-- EmptySlot
IMapable <|-- Record
BeingContainer o- IMapable
Being <|-- Human
IMovable <|-- Human
IDiseaseSensitive <|-- Human
IMovable -o Record
Map *- EmptySlot
Map -o BeingContainer
Human <|-- Doctor
Being <|-- Vehicle
IMovable <|-- Vehicle
Vehicle <|-- Ambulance
Vehicle <|-- Hearse
Being <|-- Building
Building <|-- Hospital
Building <|-- Graveyard
Building <|-- Dispatching
IDisease <|-- Disease
Disease <|-- Virus
@enduml